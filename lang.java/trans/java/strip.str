module java/strip

imports

  signatures/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/interfaces/-
  signatures/java/lexical/-
  signatures/java/literals/-
  signatures/java/names/-
  signatures/java/packages/-
  signatures/java/statements/-
  signatures/java/types/-

  pp

rules

  null-statement-list = ![<null-statement>]
  null-statement =
    !Throw( NewInstance(
              None()
            , []
            , Id("java")
            , [QualifiedId([], Id("lang")), QualifiedId([], Id("RuntimeException"))]
            , None()
            , [StringLiteral("\"Implementation stripped\"")]
            )
          )


  null-expression-list = ![<null-expression>]
  null-expression = !Null()


  has-public-access    = where(getfirst(?Public()))
  has-private-access   = where(getfirst(?Private()))
  has-protected-access = where(getfirst(?Protected()))
  has-package-access   = not(getfirst(?Public() + ?Private() + ?Protected()))
  
  has-non-private-access = where(getfirst(?Public() + ?Protected())) <+ not(getfirst(?Private()))

  has-semi-public-access = where(getfirst(?Public())) <+ not(getfirst(?Protected() + ?Private()))
  

rules

  strip-to-skeleton =
    java-filter-all(
      is-type-decl(remove-anns)
    )
  ; strip-unused-imports

  strip-to-public-interface =
    java-filter-all(
      is-type-decl(remove-anns)
    + is-member-decl(has-semi-public-access ; remove-anns)
    )
  ; strip-impls
  ; strip-unused-imports


rules

  java-filter-all(s) = topdown(try(java-filter(s)))

  java-filter(s) =
    CompilationUnit(id, id, with-filter(s))                // 7.3. Compilation Units
  + ClassDeclaration(id, id, id, id, id, with-filter(s))   // 8.1. Class Declarations
  + EnumDeclComma(id, id, id, with-filter(s), id)          // 8.9. Enum Types
  + EnumDecl(id, id, id, with-filter(s), id)
  + EnumBodyDecs(with-filter(s))
  + NormalInterface(id, id, id, id, with-filter(s))        // 9.1. Interface Declarations
  + AnnoDec(id, id, with-filter(s))                        // 9.6. Annotation Types


rules

  is-type-decl(a) =
    ClassDeclaration(a, id, id, id, id, id)          // 8.1. Class Declarations
  + EnumDeclComma(a, id, id, id, id)                 // 8.9. Enum Types
  + EnumDecl(a, id, id, id, id)
  + NormalInterface(a, id, id, id, id)               // 9.1. Interface Declarations
  + AnnoDec(a, id, id)                               // 9.6. Annotation Types

  is-member-decl(a) =
    FieldDecl(a, id, id)                             // 8.3. Field Declarations
  + MethodDecl(a, id, id)                            // 8.4. Method Declarations
  + ConstrDecl(a, id, id, id, id, id, id)            // 8.8. Constructor Declarations
  + AbstractMethodDec(a, id, id)                     // 9.4. Method Declarations


rules // strip implementations of methods, variable assignments etc.

  strip-impls = topdown(try(strip-impl))

  strip-impl =
    ?VariableDeclInit(<id>, _)                                      // 8.3. Field Declarations
  + ConstrDecl(id, id, id, id, id, !None(), null-statement-list)    // 8.8. Constructor Declarations
  + EnumConstArgs(null-expression-list)
  + Block(null-statement-list)                                      // 14.2. Blocks


rules // strip anntations from elements

  // 9.7. Annotations
  remove-anns = with-filter(not(?Anno(_, _) + ?MarkerAnno(_) + ?SingleElemAnno(_, _)))


rules

  strip-unused-imports:
      CompilationUnit(pkgDecl, importDeclList, typeDeclList) -> CompilationUnit(pkgDecl, importDeclList', typeDeclList)
    with
      used-types := <collect-all( ?TypeName(<id>) + ?PackageOrTypeName(<id>) + ?AmbiguousName(<id>)
                                + ?ClassType(<id>, _) + ?ClassType(_, <id>, _)
                                )> typeDeclList
    ; used-exprs := <collect-all( ?ExpressionName(<id>) + ?AmbiguousName(<id>) + ?MethodName(<id>)
                                )> typeDeclList
    ; importDeclList' := <with-filter(where(is-used-import( \ x -> <getfirst(?x)> used-types \
                                                          , \ x -> <getfirst(?x)> used-exprs \
                                                          )))> importDeclList

  // 6.5. Determining the Meaning of a Name
  is-used-typename(used-type) =
    ?TypeName(<where(used-type)>)
  + ?TypeName(_, <where(used-type)>)

  // 7.5. Import Declarations
  is-used-import(used-type, used-expr) =
    ?SingleTypeImport(<where(is-used-typename(used-type))>)
  + ?TypeImportOnDemand(_)
  + ?SingleStaticImport(_, <where(used-expr)>)
  + ?StaticImportOnDemand(_)

rules

  with-filter(s) = with(is-list) ; filter(s)
