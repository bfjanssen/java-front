module java/classes/ClassDeclarations

imports

  signatures/java/classes/ClassDeclarations-sig

  java/JRE
  java/classes/Main
  java/classes/ConstructorDeclarations
  java/classes/EnumDeclarations
  java/classes/FieldDeclarations
  java/classes/InstanceInitializers
  java/classes/MethodDeclarations
  java/classes/StaticInitializers
  java/interfaces/Annotations
  java/interfaces/InterfaceDeclarations
  java/names/Main
  java/names/TypeNames
  java/types/Main
  java/types/ReferenceTypes
  java/types/TypeVariable
  java/util/Boolean


rules // 8.1. Class Declarations

  clsDeclOk : scope * ClassDeclaration * scope

  clsDeclOk(s, NormalClassDeclaration2ClassDeclaration(normalClsDecl), s_def) :-
    normalClsDeclOk(s, normalClsDecl, s_def),
    true.

  clsDeclOk(s, EnumDeclaration2ClassDeclaration(enumDecl), s_def) :-
    enumDeclOk(s, enumDecl, s_def),
    true.


  normalClsDeclOk : scope * NormalClassDeclaration * scope

  normalClsDeclOk(s, ClassDeclaration(clsModList, id, typeParamsOpt, superClsOpt, superIntfsOpt, clsBodyDeclList), s_def) :-
  {s_cls s_clsStatic s_typeParams}
    clsModListOk(s, clsModList),

    new s_cls,
    declareType(s_def, id, s_cls, CLASS()),
    // FIXME noDuplicateType
    // FIXME noEnclosingTypeSameName
    // FIXME noClassCycle

    new s_clsStatic,
    s_cls -STATIC_MEMBERS-> s_clsStatic,

    s_typeParams == typeParamsOptOk(s, typeParamsOpt),
    addLexical(s_cls, hasStaticClsMod(clsModList), s_typeParams),

    superClsOptOk(s_typeParams, superClsOpt, s_cls),
    superIntfsOptOk(s_typeParams, superIntfsOpt, s_cls),

    declareImplicitCtorIfMissing(s_cls, clsBodyDeclList),

    clsBodyDeclListOk(s_cls, clsBodyDeclList),
    true.


  clsModOk : scope * ClassModifier
  clsModListOk maps clsModOk(*, list(*))

  clsModOk(s, Annotation2ClassModifier(anno)) :-
    annoOk(s, anno),
    true.
  clsModOk(s, Public2ClassModifier(_)) :- true.
  clsModOk(s, Protected2ClassModifier(_)) :- true.
  clsModOk(s, Private2ClassModifier(_)) :- true.
  clsModOk(s, Abstract2ClassModifier(_)) :- true.
  clsModOk(s, Static2ClassModifier(_)) :- true.
  clsModOk(s, Final2ClassModifier(_)) :- true.
  clsModOk(s, Strictfp2ClassModifier(_)) :- true.


  hasStaticClsMod : list(ClassModifier) -> B

  hasStaticClsMod([Static2ClassModifier(_)|_]) = T().
  hasStaticClsMod([_|clsModList]) = hasStaticClsMod(clsModList).
  hasStaticClsMod([]) = F().


  typeParamsOptOk : scope * list(TypeParameters) -> scope
  
  typeParamsOptOk(s, []) = s.

  typeParamsOptOk(s, [typeParams]) = typeParamsOk(s, typeParams).


  typeParamsOk : scope * TypeParameters -> scope

  typeParamsOk(s, TypeParameters(typeParamList)) = s_typeParams :-
    new s_typeParams,
    s_typeParams -LEX-> s,
    typeParamListOk(s_typeParams, typeParamList).


  superClsOptOk : scope * list(SuperClass) * scope

  superClsOptOk(s, [], s_cls) :-
    setSuperCls(s_cls, objectOk(s)),
    true.

  superClsOptOk(s, [SuperClass(clsType)], s_cls) :-
  {T}
    T == clsTypeOk(s, clsType),
    setSuperCls(s_cls, T).


  setSuperCls : scope * TYPE

  setSuperCls(s_cls, T) :-
    isClsType(T),
    s_cls -EXTENDS-> typeScope(T).


  superIntfsOk : scope * SuperInterfaces * scope
  superIntfsOptOk maps superIntfsOk(*, list(*), *)

  superIntfsOk(s, SuperInterface(clsTypeList), s_cls) :-
  {Ts}
    Ts == clsTypeListOk(s, clsTypeList),
    addSuperIntfList(s_cls, Ts).

  addSuperIntf : scope * TYPE
  addSuperIntfList maps addSuperIntf(*, list(*))

  addSuperIntf(s_cls, T) :-
    isIntfType(T),
    s_cls -IMPLEMENTS-> typeScope(T).


  setSuperClsOrImplementIntf : scope * TYPE

  setSuperClsOrImplementIntf(s_cls, T) :-
    setSuperClsOrImplementIntf1(s_cls, typeKind(T), T).

      setSuperClsOrImplementIntf1 : scope * KIND * TYPE

      setSuperClsOrImplementIntf1(s_cls, CLASS(), T) :-
        setSuperCls(s_cls, T).

      setSuperClsOrImplementIntf1(s_cls, INTF(), T) :-
        setSuperCls(s_cls, objectOk(s_cls)),
        addSuperIntf(s_cls, T).


  declareImplicitCtorIfMissing : scope * list(ClassBodyDeclaration)

  declareImplicitCtorIfMissing(s, [ConstructorDeclaration2ClassBodyDeclaration(_)|_]).

  declareImplicitCtorIfMissing(s, [_|clsBodyDecls]) :-
    declareImplicitCtorIfMissing(s, clsBodyDecls).

  declareImplicitCtorIfMissing(s, []) :-
    declareImplicitCtor(s).


  clsBodyDeclOk : scope * ClassBodyDeclaration
  clsBodyDeclListOk maps clsBodyDeclOk(*, list(*))

  clsBodyDeclOk(s, ClassMemberDeclaration2ClassBodyDeclaration(clsMemDecl)) :-
    clsMemDeclOk(s, clsMemDecl),
    true.

  clsBodyDeclOk(s, InstanceInitializer2ClassBodyDeclaration(instInit)) :-
    instInitOk(s, instInit),
    true.

  clsBodyDeclOk(s, StaticInitializer2ClassBodyDeclaration(staticInit)) :-
    staticInitOk(s, staticInit),
    true.

  clsBodyDeclOk(s, ConstructorDeclaration2ClassBodyDeclaration(ctorDecl)) :-
    ctorDeclOk(s, ctorDecl),
    true.


  clsMemDeclOk : scope * ClassMemberDeclaration

  clsMemDeclOk(s, FieldDeclaration2ClassMemberDeclaration(fldDecl)) :-
    fldDeclOk(s, fldDecl),
    true.

  clsMemDeclOk(s, MethodDeclaration2ClassMemberDeclaration(mthdDecl)) :-
    mthdDeclOk(s, mthdDecl),
    true.

  clsMemDeclOk(s, ClassDeclaration2ClassMemberDeclaration(clsDecl)) :-
    clsDeclOk(s, clsDecl, s),
    true.

  clsMemDeclOk(s, InterfaceDeclaration2ClassMemberDeclaration(intfDecl)) :-
    intfDeclOk(s, intfDecl, s),
    true.

  clsMemDeclOk(s, SemiColon2ClassMemberDeclaration(semiColon)) :-
    true.


