module java/classes/MethodDeclarations

imports

  signatures/java/classes/MethodDeclarations-sig

  java/JRE
  java/classes/Main
  java/classes/ClassDeclarations
  java/classes/FieldDeclarations
  java/interfaces/Annotations
  java/names/Main
  java/names/MethodNames
  java/statements/Blocks
  java/types/ReferenceTypes
  java/util/Boolean


rules // 8.4. Method Declarations

  mthdDeclOk : scope * MethodDeclaration

  mthdDeclOk(s, MethodDecl(mthdModList, mthdHeader, mthdBody)) :-
  {s_mthd}
    mthdModListOk(s, mthdModList),
    new s_mthd,
    mthdHeaderOk(s, mthdHeader, s_mthd), // connects `s_mthd` to `s`
    mthdBodyOk(s_mthd, mthdBody),
    true.


  mthdHeaderOk : scope * MethodHeader * scope

  mthdHeaderOk(s, MethodHeader(result, id, formalParams, annDimsEmpty, throwsOpt), s_mthd) :-
  {R Ts}
    s_mthd -LEX-> s, // FIXME static
    R == resultOk(s, result),
    declareReturn(s_mthd, R),
    Ts == formalParamsOk(s, formalParams, s_mthd),
    declareMthdName(s, id, Ts, R),
    annDimsEmptyOk(s, annDimsEmpty),
    throwsOptOk(s, throwsOpt),
    true.

  mthdHeaderOk(s, MethodHeaderTypeParameters(typeParams, annoList, result, id, formalParams, throwsOpt), s_mthd) :-
  {s_typeParams R Ts}
    s_typeParams == typeParamsOk(s, typeParams),
    s_mthd -LEX-> s_typeParams, // FIXME static
    annoListOk(s_typeParams, annoList),
    R == resultOk(s_typeParams, result),
    declareReturn(s_mthd, R),
    Ts == formalParamsOk(s_typeParams, formalParams, s_mthd),
    declareMthdName(s, id, Ts, R),
    throwsOptOk(s_typeParams, throwsOpt),
    true.


  resultOk : scope * Result -> RETURN

  resultOk(s, UnannType2Result(unannType)) = TYPED(T) :-
    T == unannTypeOk(s, unannType).

  resultOk(s, Void()) = VOID().


  throwsOk : scope * Throws
  throwsOptOk maps throwsOk(*, list(*))

  throwsOk(s, ThrowsDec(exceptTypeList)) :-
    exceptTypeListOk(s, exceptTypeList),
    true.


  exceptTypeOk : scope * ExceptionType
  exceptTypeListOk maps exceptTypeOk(*, list(*))

  exceptTypeOk(s, ClassType2ExceptionType(clsType)) :-
  {T}
    T == clsTypeOk(s, clsType),
    isThrowable(T) == T(),
    true.


  mthdModOk : scope * MethodModifier
  mthdModListOk maps mthdModOk(*, list(*))

  mthdModOk(s, Annotation2MethodModifier(anno)) :-
    annoOk(s, anno),
    true.
  mthdModOk(s, Public2MethodModifier(_)) :- true.
  mthdModOk(s, Protected2MethodModifier(_)) :- true.
  mthdModOk(s, Private2MethodModifier(_)) :- true.
  mthdModOk(s, Abstract2MethodModifier(_)) :- true.
  mthdModOk(s, Static2MethodModifier(_)) :- true.
  mthdModOk(s, Final2MethodModifier(_)) :- true.
  mthdModOk(s, Synchronized2MethodModifier(_)) :- true.
  mthdModOk(s, Native2MethodModifier(_)) :- true.
  mthdModOk(s, Strictfp2MethodModifier(_)) :- true.


  hasStaticMthdMod : list(MethodModifier) -> B

  hasStaticMthdMod([Static2MethodModifier(_)|_]) = T().
  hasStaticMthdMod([_|mthdModList]) = hasStaticMthdMod(mthdModList).
  hasStaticMthdMod([]) = F().


  mthdBodyOk : scope * MethodBody

  mthdBodyOk(s, Block2MethodBody(blk)) :-
    blkOk(s, blk),
    true.

  mthdBodyOk(s, NoMethodBody()) :-
    true.


  recvParamOk : scope * ReceiverParam * scope

  recvParamOk(s, ReceiverParamQual(annoList, unannType, id), s_def) :-
    annoListOk(s, annoList),
    _ == unannTypeOk(s, unannType),
    // FIXME Define local this and/or check correspondence with enclosing this
    true.

  recvParamOk(s, ReceiverParam(annoList, unannType), s_def) :-
    annoListOk(s, annoList),
    _ == unannTypeOk(s, unannType),
    // FIXME Define local this and/or check correspondence with enclosing this
    true.


  formalParamsOk : scope * FormalParams * scope -> list(TYPE)

  formalParamsOk(s, NoParams(), s_def) = [] :-
    true.

  formalParamsOk(s, ReceiverParam2FormalParams(recvParam), s_def) = [] :-
    recvParamOk(s, recvParam, s_def),
    true.

  formalParamsOk(s, SingleParam(lastFormalParam), s_def) = [T] :-
    T == lastFormalParamOk(s, lastFormalParam, s_def),
    true.

  formalParamsOk(s, ParamList(formalParamList, lastFormalParam), s_def) = append1(Ts,T) :-
    Ts == formalParamListOk(s, formalParamList, s_def),
    T == lastFormalParamOk(s, lastFormalParam, s_def),
    true.

  formalParamsOk(s, ReceiverParamList(recvParam, formalParamList, lastFormalParam), s_def) = append1(Ts,T) :-
    recvParamOk(s, recvParam, s_def),
    Ts == formalParamListOk(s, formalParamList, s_def),
    T == lastFormalParamOk(s, lastFormalParam, s_def),
    true.


  lastFormalParamOk : scope * LastFormalParam * scope -> TYPE

  lastFormalParamOk(s, FormalParam2LastFormalParam(formalParam), s_def) = T :-
    T == formalParamOk(s, formalParam, s_def),
    true.

  lastFormalParamOk(s, VarArityParam(varModList, unannType, annoList, varDeclId), s_def) = T :-
  {T'}
    varModListOk(s, varModList),
    T' == unannTypeOk(s, unannType),
    annoListOk(s, annoList),
    T == makeArrayType(s, T'),
    varDeclIdOk(s, T, varDeclId, s_def),
    true.


  formalParamOk : scope * FormalParam * scope -> TYPE
  formalParamListOk maps formalParamOk(*, list(*), *) = list(*)

  formalParamOk(s, FormalParam(varModList, unannType, varDeclId), s_def) = T :-
    varModListOk(s, varModList),
    T == unannTypeOk(s, unannType),
    varDeclIdOk(s, T, varDeclId, s_def),
    true.


  varModOk : scope * VariableModifier
  varModListOk maps varModOk(*, list(*))

  varModOk(s, Annotation2VariableModifier(anno)) :-
    annoOk(s, anno),
    true.
  varModOk(s, Final2VariableModifier(_)) :- true.


rules

  append1 : list(TYPE) * TYPE -> list(TYPE)

  append1(Ts, T) = append(Ts, [T]).

    append : list(TYPE) * list(TYPE) -> list(TYPE)

    append([], Us) = Us.

    append([T|Ts], Us) = [T|append(Ts, Us)].
  
