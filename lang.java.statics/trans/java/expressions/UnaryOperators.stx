module java/expressions/UnaryOperators

imports

  signatures/java/expressions/UnaryOperators-sig

  java/classes/ClassDeclarations
  java/expressions/Main
  java/types/Main
  java/types/PrimitiveTypes
  java/types/ReferenceTypes
  java/types/Subtyping


rules // 15.15. Unary Operators

  exprOk(s, Plus(expr)) = T :-
    T == exprOk(s, expr),
    isNumeric(T). // FIXME allows converions

  exprOk(s, Minus(expr)) = T :-
    T == exprOk(s, expr),
    isNumeric(T). // FIXME allows converions

  exprOk(s, PreIncr(expr)) = T :-
    T == exprOk(s, expr),
    isNumeric(T). // FIXME allows converions

  exprOk(s, PreDecr(expr)) = T :-
    T == exprOk(s, expr),
    isNumeric(T). // FIXME allows converions

  exprOk(s, Complement(expr)) = T :-
    T == exprOk(s, expr),
    isNumeric(T). // FIXME allows converions

  exprOk(s, Not(expr)) = T :-
    T == exprOk(s, expr),
    subType(T, BOOLEAN()). // FIXME allows converions

  exprOk(s, CastPrimitive(primType, expr)) = T :-
  {T'}
    T == primTypeOk(s, primType),
    T' == exprOk(s, expr),
    subType(T', T).

  exprOk(s, CastReference(refType, additionalBoundList, expr)) = S@REF(s_ty) :-
  {T Ts T'}
    T == refTypeOk(s, refType),
    Ts == additionalBoundListOk(s, additionalBoundList),
    
    new s_ty,
    setType(s_ty, S),
    setKind(s_ty, CLASS()),
    setSuperClsOrImplementIntf (s_ty, T),
    addSuperIntfList(s_ty, Ts),

    T' == exprOk(s, expr),
    subType(T', T).

  additionalBoundOk : scope * AdditionalBound -> TYPE
  additionalBoundListOk maps additionalBoundOk(*, list(*)) = list(*)

  additionalBoundOk(s, AdditionalBound(clsType)) = T :-
    T == clsTypeOk(s, clsType),
    true.


