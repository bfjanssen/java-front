module trans/java/expressions/PrimaryExpressions

imports

  trans/sig/java/expressions/PrimaryExpressions-sig

  trans/java/JRE
  trans/java/expressions/Main
  trans/java/literals/Main
  trans/java/names/TypeNames
  trans/java/types/PrimitiveTypes


rules // 15.8. Primary Expressions

  exprOk(s, Literal2Expression(lit)) = T :-
    T == litOk(s, lit).

  exprOk(s, ClassLiteral2Expression(clsLit)) = T :-
    T == clsLitOk(s, clsLit),
    true.

  exprOk(s, This()) = typeDeclType(this(s)).

  exprOk(s, QThis(typeName)) = typeDeclType(qualThis(typeNameOk(s, typeName), s)).


  clsLitOk : scope * ClassLiteral -> TYPE

  clsLitOk(s, TypeNameClassLiteral(typeName, dimsList)) = classOk(s) :-
    _ == typeNameOk(s, typeName),
    dimsListOk(dimsList),
    true.

  clsLitOk(s, NumericTypeClassLiteral(numType, dimsList)) = classOk(s) :-
    _ == numTypeOk(numType),
    dimsListOk(dimsList),
    true.

  clsLitOk(s, BooleanClassLiteral(dimsList)) = classOk(s) :-
    dimsListOk(dimsList),
    true.

  clsLitOk(s, VoidClassLiteral()) = classOk(s) :-
    true.


  dimsOk : Dims
  dimsListOk maps dimsOk(list(*))

  dimsOk(Dimension()) :-
    true.


